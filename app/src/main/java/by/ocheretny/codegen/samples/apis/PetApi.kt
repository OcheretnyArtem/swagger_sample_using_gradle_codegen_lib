/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Swagger Petstore
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package by.ocheretny.codegen.samples.apis

import by.ocheretny.codegen.samples.models.ApiResponse
import by.ocheretny.codegen.samples.models.Pet
import okhttp3.RequestBody
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.PUT

@JvmSuppressWildcards
interface PetApi {
    /**
     * Add a new pet to the store
     * 
     * The endpoint is owned by defaultname service owner
     * @param body Pet object that needs to be added to the store (required)
     */
    @Headers(
        "X-Operation-ID: addPet",
      "Content-Type: application/json"
    )
    @POST("pet")
    suspend fun addPet(
        @retrofit2.http.Body body: Pet
    ): Unit
    /**
     * Deletes a pet
     * 
     * The endpoint is owned by defaultname service owner
     * @param petId Pet id to delete (required)
     * @param apiKey (optional)
     */
    @Headers(
        "X-Operation-ID: deletePet"
    )
    @DELETE("pet/{petId}")
    suspend fun deletePet(
        @retrofit2.http.Path("petId") petId: Long,
        @retrofit2.http.Header("api_key") apiKey: String?
    ): Unit
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * The endpoint is owned by defaultname service owner
     * @param status Status values that need to be considered for filter (required)
     */
    @Headers(
        "X-Operation-ID: findPetsByStatus"
    )
    @GET("pet/findByStatus")
    suspend fun findPetsByStatus(
        @retrofit2.http.Query("status") status: List<String>
    ): List<Pet>
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * The endpoint is owned by defaultname service owner
     * @param tags Tags to filter by (required)
     */
    @Headers(
        "X-Operation-ID: findPetsByTags"
    )
    @GET("pet/findByTags")
    @Deprecated(message = "Deprecated")
    suspend fun findPetsByTags(
        @retrofit2.http.Query("tags") tags: List<String>
    ): List<Pet>
    /**
     * Find pet by ID
     * Returns a single pet
     * The endpoint is owned by defaultname service owner
     * @param petId ID of pet to return (required)
     */
    @Headers(
        "X-Operation-ID: getPetById"
    )
    @GET("pet/{petId}")
    suspend fun getPetById(
        @retrofit2.http.Path("petId") petId: Long
    ): Pet
    /**
     * Update an existing pet
     * 
     * The endpoint is owned by defaultname service owner
     * @param body Pet object that needs to be added to the store (required)
     */
    @Headers(
        "X-Operation-ID: updatePet",
      "Content-Type: application/json"
    )
    @PUT("pet")
    suspend fun updatePet(
        @retrofit2.http.Body body: Pet
    ): Unit
    /**
     * Updates a pet in the store with form data
     * 
     * The endpoint is owned by defaultname service owner
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     */
    @retrofit2.http.FormUrlEncoded
    @Headers(
        "X-Operation-ID: updatePetWithForm"
    )
    @POST("pet/{petId}")
    suspend fun updatePetWithForm(
        @retrofit2.http.Path("petId") petId: Long,
        @retrofit2.http.Field("name") name: String?,
        @retrofit2.http.Field("status") status: String?
    ): Unit
    /**
     * uploads an image
     * 
     * The endpoint is owned by defaultname service owner
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     */
    @retrofit2.http.Multipart
    @Headers(
        "X-Operation-ID: uploadFile"
    )
    @POST("pet/{petId}/uploadImage")
    suspend fun uploadFile(
        @retrofit2.http.Path("petId") petId: Long,
        @retrofit2.http.Part("additionalMetadata") additionalMetadata: String?,
        @retrofit2.http.Part("file\"; filename=\"file") file: RequestBody?
    ): ApiResponse
}
